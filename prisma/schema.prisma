generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  googleId       String         @unique
  email          String         @unique
  name           String
  picture        String
  username       String?        @unique
  description    String?
  contents       Content[]
  collaborations Collaborator[]
}
model Comment {
  id           String @id @default(cuid())
  userGoogleId String?
  text         String
  contentId    String
  Content      Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
model Collaborator {
  id           String   @id @default(cuid())
  userGoogleId String?
  contentId    String?
  roleId       String
  User         User?    @relation(fields: [userGoogleId], references: [googleId])
  Content      Content? @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role     @relation(fields: [roleId], references: [id])
}

model Content {
  id            String         @id @default(cuid())
  title         String
  content       String?        @db.Text
  description   String
  image         String?
  userGoogleId  String?
  contentTypeId String?
  status        String         @default("Borrador")
  likeCount     Int            @default(0)
  dislikeCount  Int            @default(0)
  contentType   ContentType?   @relation(fields: [contentTypeId], references: [id])
  collaborators Collaborator[]
  User          User?          @relation(fields: [userGoogleId], references: [googleId], onDelete: Cascade, onUpdate: Cascade)
  roles         Role[]
  comments      Comment[]
  @@fulltext([title])
}

model ContentType {
  id          String    @id @default(cuid())
  name        String
  description String
  categoryId  String?
  Category    Category? @relation(fields: [categoryId], references: [id])
  Content     Content[]
}

model Category {
  id               String        @id @default(cuid())
  name             String
  type_of_contents ContentType[]
}

model Role {
  id           String         @id @default(cuid())
  name         String
  description  String
  contentId    String?
  permissions  Permissions[]
  Collaborator Collaborator[]
  Content      Content?       @relation(fields: [contentId], references: [id])
}

model Permissions {
  id     String  @id @default(cuid())
  name   String
  type   String
  roleId String?
  Role   Role?   @relation(fields: [roleId], references: [id])
}

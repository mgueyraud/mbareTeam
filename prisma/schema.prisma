generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  googleId       String         @unique
  email          String         @unique
  name           String
  picture        String
  username       String?        @unique
  description    String?
  collaborations Collaborator[]
  contents       Content[]
}

model Collaborator {
  id           String   @id @default(cuid())
  userGoogleId String?
  contentId    String?
  roleId       String
  Content      Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  role         Role     @relation(fields: [roleId], references: [id])
  User         User?    @relation(fields: [userGoogleId], references: [googleId])

  @@index([contentId], map: "Collaborator_contentId_fkey")
  @@index([roleId], map: "Collaborator_roleId_fkey")
  @@index([userGoogleId], map: "Collaborator_userGoogleId_fkey")
}

model Content {
  id            String         @id @default(cuid())
  title         String
  content       String?
  description   String
  image         String?
  userGoogleId  String?
  contentTypeId String?
  status        String         @default("Borrador")
  likeCount     Int            @default(0)
  collaborators Collaborator[]
  contentType   ContentType?   @relation(fields: [contentTypeId], references: [id])
  User          User?          @relation(fields: [userGoogleId], references: [googleId], onDelete: Cascade)
  roles         Role[]

  @@index([contentTypeId], map: "Content_contentTypeId_fkey")
  @@index([userGoogleId], map: "Content_userGoogleId_fkey")
}

model ContentType {
  id          String    @id @default(cuid())
  name        String
  description String
  categoryId  String?
  Content     Content[]
  Category    Category? @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "ContentType_categoryId_fkey")
}

model Category {
  id               String        @id @default(cuid())
  name             String
  type_of_contents ContentType[]
}

model Role {
  id           String            @id @default(cuid())
  name         String
  description  String
  contentId    String?
  Collaborator Collaborator[]
  Content      Content?          @relation(fields: [contentId], references: [id])
  permissions  RolePermissions[]

  @@index([contentId], map: "Role_contentId_fkey")
}

model Permissions {
  id    String            @id @default(cuid())
  name  String
  type  String
  roles RolePermissions[]
}

model RolePermissions {
  id            String      @id @default(cuid())
  roleId        String
  permissionsId String
  Permissions   Permissions @relation(fields: [permissionsId], references: [id])
  Role          Role        @relation(fields: [roleId], references: [id])

  @@index([permissionsId], map: "RolePermissions_permissionsId_fkey")
  @@index([roleId], map: "RolePermissions_roleId_fkey")
}
